@{
    ViewBag.Title = "Employee - List of Employees";
}

@Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/jquery.validate.js"></script>

@section scripts{

    <script type="text/javascript">

        $('#editEmployeeModal').hide();
        $('#createEmployeeErrorAlert').hide();
        $('#createEmployeeSuccessAlert').hide();

        function Employee(data) {
            this.employeeId = ko.observable(data.employeeId);
            this.firstName = ko.observable(data.firstName);
            this.lastName = ko.observable(data.lastName);
            this.email = ko.observable(data.email);
            this.position = ko.observable(data.position);
            this.dateCreated = ko.observable(data.dateCreated);
            this.lastModified = ko.observable(data.lastModified);
            //Mode is used to determine which template to use - only contain 'display' template as of 1.24.17
            this.mode = ko.observable("display");
        }

        function EmployeeListViewModel() {

            //**********DATA BEGIN**********

            var self = this;

            //Initalize employees array.
            self.employees = ko.observableArray([]);

            //Holds the value of the current selected employee.
            self.selectedEmployee = ko.observable(null);

            //Holds the value of the current employee being edited.
            self.selectedEmployeeEdit = ko.observable(null);

            //Properties for the Employee Create Form
            self.newFirstNameText = ko.observable();
            self.newLastNameText = ko.observable();
            self.newEmailText = ko.observable();
            self.newPositionText = ko.observable();

            //**********DATA END************


            //**********OPERATIONS BEGIN**********

            //Executed when the Create Employee Form is submitted
            self.createEmployee = function () {

                //Initialize the new employee
                var newEmployeeRecord = {
                    employeeId: ko.observable(0),
                    firstName: this.newFirstNameText(),
                    lastName: this.newLastNameText(),
                    email: this.newEmailText(),
                    position: this.newPositionText(),
                    dateCreated: ko.observable(),
                    lastModified: ko.observable(),
                    mode: ko.observable("display")
                };

                //Post the employee to the database using an ajax call.
                $.ajax("/api/employees/create", {
                    data: ko.toJSON(newEmployeeRecord),
                    type: "POST", contentType: "application/json",
                    success: function (newRecord) {

                        //Intialize the newly added record returned from the server into a new employee instance
                        //**this will be used to add the new record to self.employees
                        var newRecordFromServer = new Employee(newRecord);

                        //Hide create employee error alert
                        $('#createEmployeeErrorAlert').hide();

                        //Display create employee success alert as well as set timer.
                        $('#createEmployeeSuccessAlert').show().fadeTo(2000, 500).slideUp(500, function () {
                            $('#createEmployeeSuccessAlert').slideUp(500);
                        });

                        //Show 'Add Employee' button.
                        $('#displayCreateFormButton').show().fadeIn();

                        //Hide create employee form.
                        $('#createEmployeeForm').hide().fadeOut();

                        //Add the newly created employee to self.employees observableArray.
                        //self.employees.push(newEmployeeRecord);
                        self.employees.push(newRecordFromServer);

                        //Reset create employee form values.
                        self.newFirstNameText("");
                        self.newLastNameText("");
                        self.newEmailText("");
                        self.newPositionText("");
                    },
                    error: function (xhr, ajaxOptions, thrownError) {

                        //Display create employee alert if an error occurs when posting to the Web API.
                        $('#createEmployeeErrorAlert').show();

                        alert("There was an error in creating the Employee: " + xhr.status + ", " + xhr.responseText);
                    }
                });
            };

            //Executed when a record in the table is selected - determines which Employee is selected (populates self.selectedEmployee).
            self.selectEmployee = function () {

                //Populate self.selectedEmployee depending on the record in the table selected.
                self.selectedEmployee(this);

                //console.log("Selected Employee: " + ko.toJSON(self.selectedEmployee));
            };

            //Executed when the 'Edit' button is selected on an employee record - populates self.selectedEmployeeEdit and displays the edit employee modal.
            self.showEmployeeEditModal = function () {

                //Populates self.selectedEmployeeEdit.
                self.selectedEmployeeEdit(new Employee(ko.toJS(this)));

                //Display the edit employee modal.
                $('#editEmployeeModal').modal('show');
                //console.log("show modal function triggered.");
            };

            //Overview: Load initial state from server, convert it to Employee instances, then populate self.employees
            //You use jQuery's $.getJSON function to get JSON data from server by making an ajax request. Another function is $.ajax
            $.getJSON("/api/employees", function (allData) {
                //Raw response = allData
                //This code takes the raw data array by the server and uses jQuery's $.map helper to construct a Employee instance from each raw entry.
                //  The resulting array of Employee objects is then pushed into the self.empoyees array, which causes the UI to update because it's observable
                var mappedEmployees = $.map(allData, function (item) { return new Employee(item) });
                //Populate self.employees with mappedEmployees
                self.employees(mappedEmployees);

                console.log("List of employees from API: " + ko.toJSON(self.employees));
            });

            //Executed when the 'Delete' button is selected on an employee record - removes the employee from the database as well as from self.employees.          //Delete button on each record (deletes employee from database using API)
            $(document).on("click", ".kout-delete", function () {

                //Set the employee to be removed
                var employeeToRemove = ko.dataFor(this);

                //Ajax call that removes the employee from the database - you pass the employeeId
                $.ajax("/api/employees/delete/id/" + ko.toJSON(employeeToRemove.employeeId), {
                    type: "DELETE", contentType: "application/json",
                    success: function () {
                        //On success remove the employee from self.employees.
                        self.employees.remove(employeeToRemove);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        //On error display an alert.
                        alert("There was an error in creating the Employee: " + xhr.status + ", " + xhr.responseText);
                    }
                });
            });

            //Executed when 'Add Employee' button is clicked - displays the create employee form
            $(document).on("click", ".display-form", function () {

                //Hides the 'Add Employee Button'.
                $('#displayCreateFormButton').hide().fadeOut();

                //Displays the create employee form.
                $('#createEmployeeForm').show().fadeIn();
            });

            //Executed when the 'Cancel' button on the create employee form is clicked - hides the create employee form, displays the 'Add Employee' button and resets the properties used in the create employee form.
            $(document).on("click", ".cancel-createForm", function () {

                //Display 'Add Employee' button.
                $('#displayCreateFormButton').show().fadeIn();

                //Hide the create employee form
                $('#createEmployeeForm').hide().fadeOut();

                //Reset create employee form values
                self.newFirstNameText("");
                self.newLastNameText("");
                self.newEmailText("");
                self.newPositionText("");
            });

            //Executed When the user clicks the 'Update' button on employee edit form
            $(document).on("click", ".update-employeeButton", function () {

                //console.log("retrieved updated data: " + ko.toJSON(self.selectedEmployeeEdit));
                //console.log("original data: " + ko.toJSON(self.selectedEmployee));


                //Ajax call that updates the employee data to the database
                $.ajax("/api/employees/update/", {
                    data: ko.toJSON(self.selectedEmployeeEdit),
                    type: "PUT", contentType: "application/json",
                    success: function () {

                        //Hide the edit employee form modal
                        $('#editEmployeeModal').hide();

                        //self.selectedEmployee = ko.observable(self.selectedEmployeeEdit);
                        //self.selectedEmployeeEdit = ko.observable(null);
                    },
                    error: function (xhr) { alert("There was an error in creating the Employee: " + xhr.status + ", " + xhr.responseText); }
                });

            });

            //Executed when the user clicks the 'Cancel' button on employee edit form
            $(document).on("click", ".cancelUpdate-employeeButton", function () {

                console.log("Edit employee data before: " + ko.toJSON(self.selectedEmployeeEdit));
                self.selectedEmployeeEdit = ko.observable(null);

                console.log("Cancel update employee!");
                console.log("Original employee data: " + ko.toJSON(self.selectedEmployee));
                console.log("Edit employee data after: " + ko.toJSON(self.selectedEmployeeEdit));

                //Hide the employee edit form modal.
                $('#editEmployeeModal').hide();
            });
        }

        ko.applyBindings(new EmployeeListViewModel());
    </script>

    @*The is the default display template (the 'mode' property in ViewModel)*@
    <script type="text/html" id="display">
        <td data-bind="text: employeeId"></td>
        <td data-bind="text: firstName"></td>
        <td data-bind="text: lastName"></td>
        <td data-bind="text: email"></td>
        <td data-bind="text: position"></td>
        <td data-bind="text: dateCreated"></td>
        <td data-bind="text: lastModified"></td>
        <td>
            @*<button class="btn btn-success kout-edit">Edit</button>*@
            <button class="btn btn-success" data-bind="click: $root.showEmployeeEditModal">Edit</button>
            <button class="btn btn-danger kout-delete">Delete</button>
        </td>
    </script>
}

@*Create Employee Error Alert (Default is Hidden)*@
<div id="createEmployeeErrorAlert" class="alert alert-danger" role="alert" hidden>
    <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
    <span class="sr-only">Error:</span>
    <strong>Oops! An error occured while creating the Employee. Below is from response from the Web API: </strong>
</div>

@*Create Employee Success Alert (Default is Hidden)*@
<div id="createEmployeeSuccessAlert" class="alert alert-success" role="alert" hidden>
    <span class="glyphicon glyphicon-check" aria-hidden="true"></span>
    <span class="sr-only">Success</span>
    <strong>Employee was created successfully!</strong>
</div>

@*Create Employee Form (Default is Hidden)*@
<div id="createEmployeeForm" hidden>
    <form data-bind="submit: createEmployee">
        <input type="text" data-bind="value: newFirstNameText" placeholder="First Name" required />
        <input type="text" data-bind="value: newLastNameText" placeholder="Last Name" required />
        <input type="email" data-bind="value: newEmailText" placeholder="Email" required />
        <input type="text" data-bind="value: newPositionText" placeholder="Position" required />
        <button class="btn btn-primary" type="submit">Create</button>
        <button class="btn btn-default cancel-createForm">Cancel</button>
    </form>
</div>

@*Add Employee Button (Default is Show)*@
<button id="displayCreateFormButton" class="btn btn-primary display-form">Add Employee</button>

<hr />

<table class="table">
    <tr>
        <th>
            Employee Id
        </th>
        <th>
            First Name
        </th>
        <th>
            Last Name
        </th>
        <th>
            Email
        </th>
        <th>
            Position
        </th>
        <th>
            Date Created
        </th>
        <th>
            Last Modified
        </th>
        <th></th>
    </tr>

    @*Loop through the array of employees - employees is intialized as an empty array (self.employees = ko.observableArray([])) and then populated from API*@
    <tbody data-bind="foreach: employees">
        @*Load the template for each record - name (the id of an element that contains the template you wish to render) and data (an object to supply as the data for the template to render.)*@
        <tr data-bind="template: {name: mode, data: $data}, click: $root.selectEmployee"></tr>
    </tbody>
</table>

<!--------------------------------------------MODALS-------------------------------------------->

<div class="modal" id="editEmployeeModal" data-bind="with: selectedEmployeeEdit" data-dismiss="modal" data-backdrop="false" @*data-toggle="modal" data-backdrop="static" data-keyboard="false"*@>
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Employee</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="control-label col-md-3 col-md-offset-2">Employee Id</label>
                    <div>
                        <input type="text" data-bind="value: employeeId" required disabled placeholder="You cannot edit the Employee Id." />
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-3 col-md-offset-2">First Name</label>
                    <div>
                        <input type="text" data-bind="value: firstName" min="3" maxlength="25" required placeholder="First Name" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-3 col-md-offset-2">Last Name</label>
                    <div>
                        <input type="text" data-bind="value: lastName" min="3" maxlength="25" required placeholder="Last Name" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-3 col-md-offset-2">Email</label>
                    <div>
                        <input type="text" data-bind="value: email" maxlength="100" required placeholder="Email" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-3 col-md-offset-2">Position</label>
                    <div>
                        <input type="text" data-bind="value: position" min="3" maxlength="50" required placeholder="Position" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-3 col-md-offset-2">Date Created</label>
                    <div>
                        <input type="text" data-bind="value: dateCreated" required disabled placeholder="You cannot edit the date created field." />
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-3 col-md-offset-2">Last Modified</label>
                    <div>
                        <input type="text" data-bind="value: lastModified" required disabled placeholder="You cannot edit the last modified field." />
                    </div>
                </div>
                <div class="form-group">
                    <div>
                        <button class="btn btn-primary btn-lg update-employeeButton" type="submit">Update</button>
                        <button class="btn btn-default cancelUpdate-employeeButton" type="submit">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>